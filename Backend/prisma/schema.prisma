generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Category {
  FRUITS_VEGETABLES
  DAIRY_BAKERY
  SNACKS_BRANDED_FOODS
  BEVERAGES
  PERSONAL_CARE
  HOUSEHOLD_SUPPLIES
  MEAT_SEAFOOD
  GOURMET_WORLD_FOOD
  BABY_CARE
  CLEANING_HOUSEHOLD
  STAPLES
  PET_CARE
}

model User {
  id         String    @id @default(uuid()) @db.Uuid
  name       String
  email      String    @unique
  password   String
  phone      String?
  address    String?
  isVerified Boolean   @default(false)
  isAdmin    Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  cart       Cart?
  orders     Order[]
  reviews    Review[]
}

model Product {
  id          String         @id @default(uuid()) @db.Uuid
  name        String
  description String?
  price       Decimal        @db.Decimal(10,2)
  stock       Int?           @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  category    Category       @default(FRUITS_VEGETABLES)

  cartItems   CartItem[]
  orderItems  OrderItem[]
  reviews     Review[]
  images      ProductImage[]
}

model Cart {
  id         String    @id @default(uuid()) @db.Uuid
  userId     String    @unique @db.Uuid
  user       User      @relation(fields: [userId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  items      CartItem[]
}

model CartItem {
  id         String    @id @default(uuid()) @db.Uuid
  cartId     String    @db.Uuid
  productId  String    @db.Uuid
  quantity   Int       @default(1)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  cart       Cart      @relation(fields: [cartId], references: [id])
  product    Product   @relation(fields: [productId], references: [id])
}

model Order {
  id             String    @id @default(uuid()) @db.Uuid
  userId         String    @db.Uuid
  totalAmount    Decimal   @db.Decimal(10,2)
  status         String    @default("pending")
  paymentStatus  String    @default("unpaid")
  shippingAddress String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user          User      @relation(fields: [userId], references: [id])
  items         OrderItem[]
  payment       Payment?
}

model OrderItem {
  id         String    @id @default(uuid()) @db.Uuid
  orderId    String    @db.Uuid
  productId  String    @db.Uuid
  quantity   Int       @default(1)
  price      Decimal   @db.Decimal(10,2)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  order      Order     @relation(fields: [orderId], references: [id])
  product    Product   @relation(fields: [productId], references: [id])
}

model Payment {
  id            String    @id @default(uuid()) @db.Uuid
  orderId       String    @unique @db.Uuid
  paymentMethod String?
  amount        Decimal   @db.Decimal(10,2)
  paymentStatus String    @default("pending")
  paidAt        DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  order         Order     @relation(fields: [orderId], references: [id])
}

model ProductImage {
  id         String   @id @default(uuid()) @db.Uuid
  productId  String   @db.Uuid
  filename   String
  filepath   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  product    Product  @relation(fields: [productId], references: [id])
}

model Review {
  id         String    @id @default(uuid()) @db.Uuid
  userId     String    @db.Uuid
  productId  String    @db.Uuid
  rating     Int
  comment    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user       User      @relation(fields: [userId], references: [id])
  product    Product   @relation(fields: [productId], references: [id])
}
